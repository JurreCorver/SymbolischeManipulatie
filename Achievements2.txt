---------------------------------------------------------------------------------------------------------------------------------------
#DONE Mandatory

1. Het vertalen van een Expression naar een string, waarbij er niet meer haakjes worden gebruikt dan
nodig (zoals in opdracht G van de midterm).
2. In plaats van constanten moet je ook variabelen (zoals ‘x’ of ‘a’) in je expressie-boom ondersteunen.
3. Het berekenen van de numerieke waarde van een expressie. Hierbij worden de numerieke waarden van
variabelen aangeleverd met een dictionary.
4. Overload van de gelijkheidsoperator om te checken of twee expressiebomen dezelfde berekening voorstellen.
5. Het vertalen van een string naar een Expression met behulp van het Shunting-yard algoritme.


#TODO Mandatory (DONE)
---------------------------------------------------------------------------------------------------------------------------------------
#TODO EXTRA
3. - Eerst doen: expressies in variabelen ombouwen tot functies
 - exact integreren polynomen #J-W
4. Grafieken genereren
5. Grafische userinterface #Rik
Todo:
 - meer methoden (e.g. exit, evaluate, simplify, expand, integrate)
 - scrollbars in output
 - informatieve errors (!)
8. equation solver(polynomen graad 4 + numeriek implementeer rootfinder inleveropgave) #Jurre
10. pi, e, phi ondersteunen
11. Vectoren en lineaire algebra
12. Ondersteuning goniometrische identiteiten voor simplifier.py #Jurre
13. Getaltheoretische dingetjes (priemgetallen, priemfactorizatie, euler-phi) #J-W
14. Complexe getallen
15. Taylor



#DONE EXTRA

1. Functies implementeren
2. Differentiëren
- Done: basis functionaliteit, operatoren, functies
- Done: functies met meerdere argumenten
- Done: Joost style
3. Numeriek integreren
5.
 - variabele declaratie (e.g. x:= 15 dan moet daarna x-2 gewoon 13 als output geven)
 - functie declaratie (e.g. f(x):=x**2 en dan moet f(2) gewoon 4 als output geven)
6. LaTeX  #Rik
(7.)  evaluate als x niet gegeven
7.  versimpeling symbolische uitdrukkingen
9. Polynoomdeling en modulo op polynomen #J-W
13. GGD met Euclidisch algoritme

---------------------------------------------------------------------------------------------------------------------------------------

#Bugs:

--
--
--
Haakjes weg werken gaat soms mis
'1+(2-3)+4' en '1+(2+1*3)+4' worden niet verder versimpeld

----
Simplifier.py dingen die niet goed worden versimpeld #niet erg belangrijk
- (-x)**-y wordt naar -1**-y * x**-y versimpeld
- y-1 wordt naar -1+y versimpeld
----
Simplifier werkt niet op ListNode

----------------------------------
#Fixed bugs:
----------------------------------

negatieve getallen in de fromString functie, e.g.
Expression.fromString('1+(-1)*2') geeft een error,
Expression.fromString('1+(0-1)*2') werkt wel.

'd' als variabele gebruiken geeft errors want d is de differntiatie functie

simplify versimpeld '(0-1)*1/x' niet naar '1/x' --> je bedoelt '-1/x'
- simplify(frost('x**9*(x**2+1)')) werkt de haakjes niet uit #heeft J-W nodig voor deg  
- 2/(2*x)
-  -1 * sin(x) * cos(x) + -1 * sin(x) * cos(x)
waarschijnlijk versimpeld hij x**-1 * y**-1 niet naar 1/(x*y) (nog niet getest)

--
Differentiëren werkt niet meer:
print(simplify(frost('d(sin(x)*ln(x),x)')).evaluate()) geeft als output 'd'.

--

---------------------------
frost('a/b=c*e') geeft niet EqNode als bovenste node
---------------------------
print(expand(sfrost('2*x**2+x**4-x**2*(x**2+1)'))) expand niet
print(simplify(frost('-3 - 2 * x - (-2 - x + x ** 2) + x ** 2'))) simplificeert niet
----------------------------
- y**(-x+z) wordt niet y**(z-x)
-------------------------
In 'x + 7 -2 +5 +R' wordt R niet als coefficient gevonden door coefficient()